{"version":3,"sources":["sun.png","moon.png","App.js","reportWebVitals.js","index.js"],"names":["App","lat","long","useState","click","setClick","weather","setWeather","city","setcity","mode","setMode","time","Date","getHours","change","icon","document","getElementById","body","querySelector","src","sun","moon","className","alt","useEffect","axios","get","then","res","newWeather","data","catch","err","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","placeholder","id","onClick","value","name","description","main","temp","coord","lon","sys","country","feels_like","humidity","pressure","temp_max","temp_min","wind","deg","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.84caede8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sun.fe34120f.png\";","export default __webpack_public_path__ + \"static/media/moon.9591331a.png\";","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport sun from './sun.png';\nimport moon from './moon.png';\n// import backgroundVideo from './video.mp4'\n\n\n{/* <video autoPlay loop muted id='video'>\n  <source src='https://giphy.com/embed/3oEjHB1EKuujDjYFWw' type='video/gif' />\n\n\n</video> */}\n\nfunction App() {\n  const [click, setClick] = useState(true);\n  const [weather, setWeather] = useState(null);\n  const [city, setcity] = useState(null);\n  const [mode, setMode] = useState(true);\n  let date = new Date();\n  let time = date.getHours();\n  // console.log(time);\n  let lat, long;\n  function change() {\n    let icon = document.getElementById('icon');\n    let body = document.querySelector('body');\n    icon.src = mode ? sun : moon;\n    body.className = mode ? \"Dark\" : \"Light\";\n    icon.alt = mode ? \"Sun\" : \"Moon\";\n    setMode(!mode);\n  }\n  useEffect(() => {\n    let icon = document.getElementById('icon');\n    let body = document.querySelector('body');\n    if (time >= 19 || time < 6) {\n      body.className = \"Dark\";\n      icon.src = sun;\n      icon.alt = \"Sun\";\n      setMode(false);\n    }\n    else {\n      body.className = \"Light\";\n      icon.src = moon;\n      icon.alt = \"Moon\";\n      setMode(true);\n    }\n    if (city != null) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=e1c32dd0eb29cd3b266f3b06ff7c70b4&units=metric`)\n        .then((res) => {\n          const newWeather = res.data;\n          setWeather(newWeather);\n        }).catch((err) => { alert(`Something went wrong!\\n${err}`) })\n    }\n    else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition);\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n      function showPosition(position) {\n        lat = position.coords.latitude;\n        long = position.coords.longitude;\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=e1c32dd0eb29cd3b266f3b06ff7c70b4&units=metric`)\n          .then((res) => {\n            const newWeather = res.data;\n            // console.log(newWeather);\n            setWeather(newWeather);\n          }).catch((err) => { alert(`Something went wrong!\\n${err}`) })\n        // console.log(lat,long);\n      }\n    }\n  }, [click, city, lat, long])\n\n  if (weather != null) {\n    return (<div>\n      <div className=\"div2\">\n        <h1>City Weather App</h1>\n        <input placeholder=\" city name\" id=\"city\" />\n        <button onClick={() => {\n          setcity(document.getElementById('city').value);\n          setClick(!click);\n        }}>Check</button>\n        <img src={moon} alt=\"Moon\" onClick={change} id=\"icon\" />\n      </div>\n      <div className=\"div1\">\n        <h1>{weather.name}</h1>\n        <p id=\"desc\">{weather.weather[0].description}</p>\n        \n        <h1 id=\"temp\">{weather.main.temp}'C</h1>\n        <p>\n          <span>Latitude: {weather.coord.lat}</span>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n          <span>Longitude: {weather.coord.lon}</span>\n        </p>\n      </div>\n      <ul>\n        <li>Country : {weather.sys.country}</li>\n        <li>Feels Like : {weather.main.feels_like}'C</li>\n        <li>Humidity : {weather.main.humidity}g/kg</li>\n        <li>Pressure : {weather.main.pressure} Pa</li>\n        <li>Max Temperature : {weather.main.temp_max}'C</li>\n        <li>Min Temperature : {weather.main.temp_min}'C</li>\n        <li>Wind Direction : {weather.wind.deg} degree</li>\n        <li>Wind Speed : {weather.wind.speed}m/s</li>\n      </ul>\n    </div>)\n  }\n  else {\n    return (<div>\n      <div className=\"div2\">\n        <h1>City Weather App</h1>\n        <input placeholder=\" city name\" id=\"city\" />\n        <button onClick={() => {\n          setcity(document.getElementById('city').value);\n          setClick(!click);\n        }}>check</button>\n        <img src={moon} alt=\"Moon\" onClick={change} id=\"icon\" />\n      </div>\n    </div>)\n  }\n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}